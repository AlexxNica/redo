.TH redo-ifchange 1 "2011-01-18" "Redo 0\.05"
.SH NAME
.PP
redo-ifchange - rebuild target files when source files have changed
.SH SYNOPSIS
.PP
redo-ifchange [targets\.\.\.]
.SH DESCRIPTION
.PP
Normally redo-ifchange is run from a \.do file that has been
executed by \f[B]redo\f[](1)\. See \f[B]redo\f[](1) for more
details\.
.PP
redo-ifchange doesn\[aq]t take any command line options other than
a list of \f[I]targets\f[]\. To provide command line options, you
need to run \f[B]redo\f[] instead\.
.PP
redo-ifchange performs the following steps:
.IP \[bu] 2
it creates a dependency on the given \f[I]targets\f[]\. If any of
those targets change in the future, the current target (the one
calling redo-ifchange) will marked as needing to be rebuilt\.
.IP \[bu] 2
for any \f[I]target\f[] that is out of date, it calls the
equivalent of \f[B]redo\ target\f[]\.
.IP \[bu] 2
for any \f[I]target\f[] that is locked (because some other instance
of \f[B]redo\f[] or \f[B]redo-ifchange\f[] is already building it),
it waits until the lock is released\.
.PP
redo-ifchange returns only after all the given \f[I]targets\f[] are
known to be up to date\.
.SH TIP
.PP
You don\[aq]t have to run redo-ifchange \f[I]before\f[] generating
your target; you can generate your target first, then declare its
dependencies\. For example, as part of compiling a \.c file, gcc
learns the list of \.h files it depends on\. You can pass this
information along to redo-ifchange, so if any of those headers are
changed or deleted, your \.c file will be rebuilt:
.PP
\f[CR]
      \ \ \ \ redo-ifchange\ $1$2
      \ \ \ \ gcc\ -o\ $3\ -c\ $1$2\ \\
      \ \ \ \ \ \ \ \ -MMD\ -MF\ $1\.deps\ -MT\ DELETE_ME
      \ \ \ \ redo-ifchange\ $(sed\ -e\ \[aq]s,^DELETE_ME:,,\[aq]\ \\
      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -e\ \[aq]s,\\\\,,\[aq]\ $1\.deps)
\f[]
.PP
This is much less confusing than the equivalent autodependency
mechanism in \f[B]make\f[](1), because make requires that you
declare all your dependencies before running the target build
commands\.
.SH REDO
.PP
Part of the \f[B]redo\f[](1) suite\.
.SH CREDITS
.PP
The original concept for \f[B]redo\f[] was created by D\. J\.
Bernstein and documented on his web site
(http://cr\.yp\.to/redo\.html)\. This independent implementation
was created by Avery Pennarun and you can find its source code at
http://github\.com/apenwarr/redo\.
.SH SEE ALSO
.PP
\f[B]redo\f[](1), \f[B]redo-ifcreate\f[](1),
\f[B]redo-always\f[](1), \f[B]redo-stamp\f[](1)
.SH AUTHOR
Avery Pennarun <apenwarr@gmail.com>
